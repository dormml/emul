\   core_dict.fi
\ 
\   (c) 2014 Ed Swartz
\ 
\   All rights reserved. This program and the accompanying materials
\   are made available under the terms of the Eclipse Public License v1.0
\   which accompanies this distribution, and is available at
\   http://www.eclipse.org/legal/epl-v10.html
\ 

\	DP, HERE

[IFUNDEF] HERE

| User    dp

\ addr is the data-space pointer.
: HERE ( -- addr ) 
	dp @ 
;


\   These cover memory spaces, threading and compiler issues
\   related to structure of the dictionary.
\

User >latest        \ latest definition

\   Return latest definition's nfa
: latest
    >latest @
;


\ $1F constant &nmask
| $40 constant |immed
| $80 constant |srch

\   Dictionary entry:
\
\   [ word: previus entry ]
\   [ NFA: byte flags + length; name; space terminator to align ]
\   XT (under direct threading).  For code words, the code directly
\   lives here.  Colon words contain "BL *DOCOL" (R8).
\   Does words contain "BL *DODOES" (R7).


\   \\\\\\\\\\\\\\

\   Custom dictionary stuff

[IFUNDEF] TRAVERSE
: traverse  ( xt|nfa dir -- nfa|xt )
\ traverse from one end of definition to the other
\ dir < 0 means xt->nfa, dir>0 means nfa->xt

    0> if
        \ nfa -> xt

        dup c@ $1f AND  \ get the length byte
        + 1+ aligned

        \ [ has? profiling [if] ] cell+ [ [then] ]
    else
        \ xt -> nfa
        \ [ has? profiling [if] ] #cell - [ [then] ]

        \ go from xt to nfa end
        1-

        \ step back over alignment space
        dup c@ $20 = if 1- then 

        0       ( addr count )

        \ step back until we hit a byte /*with $80 set*/ whose length matches
        \ don't check the $80 flag since this makes hidden defs hard to handle
        begin 
            over c@         ( addr len cur )
            $1f and         ( addr len curlen )
            over <>         ( addr len done! )
        while
            1+ swap 1- swap ( addr-1 len+1 )
        repeat
        
        drop
    then
;

[THEN]


: nfa>xt
    1 traverse
;

: xt>nfa
    -1 traverse
;

test" xt>nfa ['] traverse xt>nfa c@ $88 = "
test" nfa>xt ['] traverse dup xt>nfa nfa>xt = "


: nfa>imm?  ( nfa -- t/f )
    c@ |immed and 0<>
;

: lfa>nfa
    2+
;

: >id       ( nfa -- caddr u )
    count $1f and 
;

: id.       ( nfa -- )
    >id type space
;

$1F constant width      \ max length of a name

\   \\\\\\\\\\\\\\\\\

[IFUNDEF] '
: ' 
\   Skip leading space delimiters. Parse name delimited by a space. Find name and return xt, the execution token for name. An
\   ambiguous condition exists if name is not found.
\
\   Similarly, the use of ' and ['] with compiling words is unclear if the precise compilation behavior of those words is not
\   specified, so ANS Forth does not permit a Standard Program to use ' or ['] with compiling words.
    bl word find 
    0= if count type ."  not found" 0 then      \ !!!
;
[THEN]

[IFUNDEF] ,
: ,
\   Reserve one cell of data space and store x in the cell. If the data-space pointer is aligned when , begins execution, it
\   will remain aligned when , finishes execution. An ambiguous condition exists if the data-space pointer is not aligned
\   prior to execution of ,.
    here ! #cell dp +!  
;
[THEN]

[IFUNDEF] >BODY
: >BODY
\        ( xt -- a-addr )
\   a-addr is the data-field address corresponding to xt. An ambiguous condition exists if xt is not for a word defined via
\   CREATE.
    2 cells +
;
[THEN]

[IFUNDEF] ALIGN
: ALIGN
    here aligned dp !
;
[THEN]

[IFUNDEF] ALLOT
: ALLOT
    here + dp !
;
[THEN]

[IFUNDEF] C,
: C,
    here c!  1  dp +!
;
[THEN]

[IFUNDEF] IMMEDIATE
: IMMEDIATE
    latest lfa>nfa dup c@ |immed or swap c!
;
[THEN]

[IFUNDEF] UNUSED
: UNUSED
    0 here -
;
[THEN]



[IFUNDEF] (lfind)

| : (lfind)      ( c-addr lfa -- c-addr 0 | nfa 1 ) 
    \ find word in dictionary    ( c-addr lfa -- c-addr 0 | nfa 1 ) 
    \ lfa is nfa-2
    
    swap >r
    
    begin
        dup
    while
        r@ over  cell+             \ nfa
        nfa=
        if
            rdrop
            cell+
            1
            exit
        else
            @            
        then
    repeat
    drop r> 0
;

| : nfa=  ( caddr nfa -- 1 | 0 )
    dup c@  $80 and if   \ not hidden?
        2>r
        r@  1+  r>  c@ $3f and  \ nfa --> caddr n
        r@  1+  r>  c@          \ caddr -> caddr n
        s<>  0=
    else
        2drop 0
    then
    
;

[THEN]

' (lfind)	TO	(find)



| : (lookup)      ( c-addr u -- caddr 0 | xt 1|-1 )
    here (>c)   \ make counted string + NFA
\ context @ @ (find) dup 0= if ... 

    here latest
    (find) 
;

: FIND  \ ( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
\   Find the definition named in the counted string at c-addr. If the definition is not found after searching all the word
\   lists in the search order, return c-addr and zero. If the definition is found, return xt. If the definition is immediate,
\   also return one (1); otherwise also return minus-one (-1). For a given string, the values returned by FIND while compiling
\   may differ from those returned while not compiling.

    latest          \ !!! need real wordlist
    (find)          \ ( c-addr 0 | xt 1 )

    \ if
    \     dup nfa>xt 
    \     swap c@ 
    \     |immed and if 1 else -1 then
    \ else
    \     0
    \ then
;

\ |test : wordtofind s" _2*" ;
\ test" find hex 21 wordtofind pad swap cmove pad 2 over c! find 2dup . . if execute 42 = else 0 then decimal "
