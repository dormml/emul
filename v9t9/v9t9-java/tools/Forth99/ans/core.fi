\   core.fi
\ 
\   (c) 2014 Ed Swartz
\ 
\   All rights reserved. This program and the accompanying materials
\   are made available under the terms of the Eclipse Public License v1.0
\   which accompanies this distribution, and is available at
\   http://www.eclipse.org/legal/epl-v10.html
\ 

\ ANS Forth CORE Words


| #cell RamVar (numbuf)
| #cell RamVar (spad)

\ -----------------------------------------

\   kernel.fs                   -- FORTH kernel
\
\   (c) 1996-2009 Edward Swartz
\
\   This program is free software; you can redistribute it and/or modify
\   it under the terms of the GNU General Public License as published by
\   the Free Software Foundation; either version 2 of the License, or
\   (at your option) any later version.
\ 
\   This program is distributed in the hope that it will be useful, but
\   WITHOUT ANY WARRANTY; without even the implied warranty of
\   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
\   General Public License for more details.
\ 
\   You should have received a copy of the GNU General Public License
\   along with this program; if not, write to the Free Software
\   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
\   02111-1307, USA.  
\
\   $Id: kernel.fs,v 1.19 2009-01-11 17:46:42 ejs Exp $

\
\   Core words
\

\   Core words.  If primitives have been defined, these are not used.

\   ! # #> #S ' ( * */ */MOD + +! +LOOP , - . ." / /MOD 
\   0< 0= 1+ 1- 2! 2* 2/ 2@ 2drop 2dup 2over 2swap :
\   ; < <# = > >body >in >number >r ?dup @ abort abort"
\   abs accept align aligned allot and base begin bl c! c,
\   c@ cell+ cells char char+ chars constant count cr create
\   decimal depth do does> drop dup else emit environment?
\   evaluate execute exit fill find fm/mod here hold i if
\   immediate invert j key leave literal loop lshift m* max min
\   mod move negate or over postpone quit r> r@ recurse
\   repeat rot rshift s" s>d sign source space spaces state
\   swap then type u. u< um* um/mod unloop until variable
\   while word xor [ ['] [char] ] 

\ 	Define deferrals for words that change among wordsets.
\	The concept is, a DEFER'ed word is a vector to another word.
\	A low-level file will define the word TO a given word.
\	Another file can extend the word by referencing the target
\	of the (presumed) lower-level word.  It should not, of course,
\	reference the DEFER'ed word itself, which would be recursive.
\	(Maybe we need a "super" or the like to let us access the current
\	definition...?  Would be like "[ ' deferred >BODY @ compile,  ]" ...?) 

\ Core
DEFER	SOURCE
DEFER	."			immediate  target-only

\ Block / Terminal
DEFER	REFILL
DEFER	ACCEPT
\ DEFER	\			target-only

\ Exception
DEFER	ABORT
DEFER	ABORT"		target-only

\ File
\ DEFER	(			immediate  target-only
DEFER	S"			immediate  target-only
\ DEFER	SOURCE-ID
\ DEFER	REFILL	 	(above)

\ Float
DEFER	(NUMBER)

\ Locals
DEFER	TO

\ Search-Order
\ DEFER	FIND
DEFER	(FIND)		( c-addr lfa -- c-addr 0 | xt 1=immed | xt -1 ) 

\ Internal: dictionary definitions
DEFER	smudge		( -- )
DEFER	name,		( "name" -- )

include core_prims.fi
include core_strings.fi
include core_output.fi
include core_input.fi
include core_terminal.fi
include core_dict.fi
include core_abort.fi
include core_interp.fi
include core_compile.fi


\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


