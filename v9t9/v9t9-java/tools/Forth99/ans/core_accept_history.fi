\   core_accept_history.fi
\ 
\   (c) 2014 Ed Swartz
\ 
\   All rights reserved. This program and the accompanying materials
\   are made available under the terms of the Eclipse Public License v1.0
\   which accompanies this distribution, and is available at
\   http://www.eclipse.org/legal/epl-v10.html
\ 

\ Sexier version with single-line history

: strlen ( caddr -- n )
	>r
    0 begin
        r@ over +  c@  if
            1+
            false
        else
            true
        then
        
    until
    rdrop
;

:: core-ACCEPT  ( c-addr +n1 -- +n2 )
\   Receive a string of at most +n1 characters. An ambiguous condition exists if +n1 is zero or greater than 32,767. Display
\   graphic characters as they are received. A program that depends on the presence or absence of non-graphic characters in
\   the string has an environmental dependency. The editing functions, if any, that the system performs in order to construct
\   the string are implementation-defined.
\
\   (this one does not automatically abort at n1 chars.)

    0 :> len
    
    0  \ cur position
    
    begin
        key
        dup  $0d -
    while
        dup 8 =  if
            \ don't go too far
            drop dup  0> if     
                overstrike  \ backspace
                1-
                $20  over c-addr +  c!
            then
        else
            dup &211 ( fctn-s ) = if
                \ cursor back
                drop dup  0> if     
                    8 emit
                    1-      \ no change in len
                then
            else
                dup &210 ( fctn-e ) = if
                    \ retrieve previous line
                    drop
                    clear
                    
                    \ take length from existing buffer
                    c-addr strlen
                    c-addr over type
                    dup to len
                else            
                    >r          \ store key
                    \ go back if too many chars
                    dup +n1 >=  if 1-  8 emit  then
                    \ show key
                    r@ emit     
                    \ store code
                    r>  over c-addr +  c! 
                    1+
                    len over  max  to len
                then
            then
        then
    repeat
    drop        \ key
    
    \ move cursor to end of content to avoid overwriting it visually
    cursor-off
    len swap ?do  j i +  c@ advance-cursor  loop
    
    \ get content length
    +n1  len  min
    
    \ nullify buffer for future Up-Arrow use
    0  over c-addr +  c! 
;


' core-ACCEPT		TO ACCEPT


