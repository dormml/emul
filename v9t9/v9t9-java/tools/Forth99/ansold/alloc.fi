\   alloc.fi
\   (c) 2013-2014 Ed Swartz
\ 
\   All rights reserved. This program and the accompanying materials
\   are made available under the terms of the Eclipse Public License v1.0
\   which accompanies this distribution, and is available at
\   http://www.eclipse.org/legal/epl-v10.html


\ normal heap header:  
\ [ 'alloc ( n heap -- addr ) ( throws ) ] 
\ [ 'free ( addr heap -- ) ( throws ) ] 
\ [ 'init ( heap -- ) ] 
\ [ link ]
\ [ low ] [ cur ] [ high ]

| : >bend 2 + ;
 
| : >hfree 2 + ; 
| : >hinit 4 + ; 
| : >link 6 + ;
| : >low 8 + ; 
| : >cur 10 + ; 
| : >high 12 + ;

| 14 constant #dheap 

\ dictionary heap header:  
\ [ 'alloc ] [ 'free ] [ 'init ] [ link ]


| : dict-halloc ( n heap -- addr ) ( throws )
	drop
	dup mfree  u>   err-no-memory ?throw
	
	\ the new addr
	here
		
    swap  
    
    ( addr n )  allot
    
	\ and remember last 'here'
	here  over >bend  !
;

| : dict-hfree ( buffer heap -- ) 
	\ see if the dictionary can shrink	
	drop 
	dup  cell+  @  here =  if 
		\ restore DP
		dp !
	else
		drop
	then
;

| : dict-hinit ( heap -- )
	['] dict-halloc over  !
	2+
	['] dict-hfree over !
	2+
	[ lastxt literal ] over !
	2+
	0 swap !
;

\ create dictionary heap
8  RamVar gheap

\ ----------------------------------------------------

| :: dyn-halloc ( n heap -- addr ) ( throw )
	heap >cur  @   ( cur )
	dup 		:> addr 
	n +  dup  	:> new-end
	
	heap >high  @   u>   err-no-memory ?throw

	new-end  heap >cur  !	
    
	\ and remember size
    n  addr cell+  !  
    addr
;

| :: dyn-hfree ( a-addr heap -- )
	heap >cur  @  :> end
	a-addr  >bend @  end =  if 
		\ lower the cur
		a-addr  heap >cur  !
	then
;

| : dyn-hinit ( heap -- )
	>low  dup cell+  @  swap  !		( start -> end )
;

: heap:  ( "name" size -- )
	dup  
	#dheap +  mfree  U>  err-no-memory ?throw 

	create
	['] dyn-halloc ,
	['] dyn-hfree ,
	['] dyn-hinit ,
	0 ,				( link )
	
	\ take RAM space
	RAM @
	
	swap  negate  RAM +! 
	RAM @  
	dup ,  ,		( start ptr )
	,				( end )
;


\ ----------------------------------------------------

\ each heap is a pointer to end of block chain;  0 if no heap
\
\ a block chain consists of entries like this:
\
\ allocated block:    [ link to prev block &~ 1 ] [ end addr ] [ data .... ]
\ deallocated block:  [ link to prev block |  1 ] [ end addr ] [ data .... ]
\ 
\  (end addr = HERE in dictionary or address of next block in dynamic heap)

| 4 Constant #heaphdr  

| : free? ( a-addr ) 
	@  1 AND
;

\ Get the size (including header) of a buffer block
| : bsize ( a-addr -- size )
	dup  >r
	>bend @
	r>  -
;

| :: reuse? ( heap bytes -- cand )
	
	0 :> cand
	$ffff :> candsize
	0 :> avail
	
	0 :> prev
	0 :> cprev
	
	heap >link @
	begin
		dup
	while
		dup	free? if    ( buffer )
			dup bsize to avail  
			avail bytes u>= 
			avail candsize u< AND if
				dup to cand
				avail to candsize
				prev to cprev 
			then 
		then
		dup to prev
		@  1 NAND
	repeat
	drop
	
	cand ." cand=" u. 
	candsize ." , size=" u. cr
	
	cand dup if
		avail bytes -  2/  #heaphdr  >= if
			\  room for another header
			cand  #heaphdr + bytes +  :> newhdr
			cand 1 OR  newhdr  !			\ mark new block as free
			newhdr
			cand >bend  dup 
				@  newhdr >bend  !	\ and ending where the former one did
				!					\ and the orig block ends before 
				
			cprev ?dup if
				newhdr over !		\ update link
				newhdr swap !		\ update link
			then
		else
			\ just reuse small space
		then  
		cand @  1 NAND  cand !		\ and no longer free

	then
	 ;

:: halloc ( bytes heap -- a-addr ) ( throws: err-fault | err-no-memory  )
\ Allocate bytes address units of contiguous data space in the given heap. 
\ The initial content of the allocated space is undefined.
\
\ If the allocation succeeds, a-addr is the aligned starting address of the
\ allocated space.
\ 
\ If the operation fails, an exception is thrown. 

	\ every allocation on 2-byte boundary
	bytes  align 
	
	\ get the space, plus a slot for the link pointer
	#heaphdr +  to bytes

	\ see if an existing block is available
	heap bytes  reuse?  :> cand
	
	0 :> addr
	cand if
		cand to addr
	else
		\ do alloc
		bytes  heap dup ( 0 + ) @  execute  to addr
	
		\ link to previous slot
		heap >link  dup  @   addr !
		
		\ remember last buffer
		addr  swap  !
	then
	
	\ leave new addr
	addr  #heaphdr +
;

\ Tell if the given address represents an entry allocated on the heap.
\ It does NOT tell if the address is inside a heap-allocated item.
\
: hheap? ( a-addr heap -- t|f )
	swap
	
	\ point to link addr
	#heaphdr -	 >r
	
	\ walk all allocated items
	( heap ) >link  @ 
	begin
		dup
	while
		r@ over = if
			rdrop drop true exit
		then
		
		\ prev entry
		@    1 NAND
	repeat
	drop rdrop false
;

: hdump ( heap -- ) 
	>link  @
	begin
		dup 
	while
		dup	 		( buffer buffer )
		dup free?	if &70 emit then		\ 'F'
		@  			( buffer link )
		swap  #heaphdr +  u.
		1 NAND
	repeat
	&69 emit
	drop
;

: hfree ( a-addr heap -- ) ( throws: err-invalid-addr | err-fault )
	:> heap
	
	dup  heap hheap?  0=  err-invalid-addr ?throw
	
	\ point to block head
	#heaphdr -  :> buffer
	
	\ mark block deallocated
	buffer @   1 OR  buffer !  
	
	begin
		\ IFF the current block is deallocated and at the end of the 
		\ heap, free space
		buffer if
			buffer free?
			buffer  heap >link  @  = 	\ and this is the top?
			AND
		else
			0
		then
	while
		buffer @  1 NAND	( -- link ) 
		
		dup  heap >link  !		( remove block )

		\ do free
		buffer  heap dup  >hfree  @  execute
		
		( link ) to buffer  			
	repeat
;

: hinit ( heap -- )
	dup  >hinit  @ execute 
;

\ ----------------------------------

: ghdump ( )
	gheap hdump
;

: ?alloc ( n -- a-addr ) ( throw )
	gheap halloc
;

: ?free ( a-addr -- ) ( throw )
	gheap hfree
;

\
\ standard words
\
: allocate ( n -- a-addr ior )
	['] ?alloc  catch
;

: free ( a-addr -- ior )
	['] ?free  catch
;

