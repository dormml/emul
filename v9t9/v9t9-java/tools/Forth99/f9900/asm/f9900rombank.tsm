
;       V9T9 ROM!
;
;   This ROM is designed for use by FORTH.  Thus it consists mainly of
;   primitive routines upon which more complex behavior can be implemented
;   in FORTH.  
;
;   Also, this ROM is *banked* with FORTH.  Thus, the ROM range may
;   either be this assembly ROM or the first part of the FORTH ROM based
;   on the address last written to in the ROM area.  (Div by 4 = bank 0 =
;   this ROM, not div by 4 = bank 1 = FORTH ROM.)  (This method of switching
;   banks is a quite easy way to catch stray pointer accesses!)
;
;   The two ROMs communicate with each other only through XOPs.
;   Interrupts may also be triggered in either ROM.  Thus, the workspaces
;   that XOP and FORTH use must be different, as must the interrupt 
;   workspace.  
;
;   The general style of the ROM is to use a small number of workspaces
;   and stacks (e.g. via Forth's SP and RP) for register management. 
;
;   "StdWS" is used for startup and for FORTH operation thereafter.
;   This ROM does not use that workspace again, except to fetch SP/RP.
;	"IntWS" is used for interrupt handling.
;	"RomWS" is used for this ROM.  
;

	incl	f9900romequs.inc
	incl	f9900gromequs.inc
	
	incl	regs.inc
	incl	macros.inc

	incl	ram.inc
	
;==========================================================================
;	ROM start (must match f9900rom.f99)
;==========================================================================
	aorg	>0

; These addresses, when written, switch ROM to the given banks 
BANK0
	equ 	>0						; FORTH bank
BANK1
	equ 	>4						; this bank

resetv		
	dw		StdWS, B1_int_reset		; vector for RESET
int1v		
	dw		IntWS, B1_int_1			; vector for INTERRUPTS

; XOP vectors

	aorg	XOPS + (XOP_VIDEO * 4)
	dw		RomWS, B1_xop_video_ent
	
	aorg	XOPS + (XOP_TERM * 4)
	dw		RomWS, B1_xop_term_ent


	aorg	SharedROM

;	[[[[ ------------------------------------------------------- content shared with bank 0 (FORTH)
;
;	The Forth9900MemoryModel loader will copy this region of code,
;	but change the SETO instructions to point to the opposite bank for FORTH.
;

F_BANK1		equ		>0100			; this bit is enabled in R15 (ignored)

;	All vectored code comes here to return
Int_Return
	; restore bank?
	coc		#F_BANK1, R15
	jeq		Int_Return_Bank0
	
	; stay in current ROM bank 
	RTWP
	
Int_Return_Bank0
	seto	@BANK0
	RTWP
	
B1_int_reset
	seto	@BANK1				; switch to ROM bank 
	soc		#F_BANK1, R15		; flag; mark that we're in bank1 on return
	bl		@int_reset
	
	seto	@BANK0
	mov		@_RESET, 14
	RTWP
	
B1_int_1
	BankedIntHandler	int_1

	; shared entry for XOP
B1_xop_term_ent
	BankedIntHandler	xop_term_ent

B1_xop_video_ent
	BankedIntHandler	xop_video_ent
	
;	]]]] ------------------------------------------------------- end shared content

	assert	$ <= ForthROM 


;==========================================================================
;	Reset
;==========================================================================
int_reset
	li SP, sysstack + sysstacksize
	
	PUSH	SP, 11
	
	limi	0
	
;	bl	@sinit			; system init
;   bl  @sndinit        ; sound init
	bl	@xv_vinit		; video init
	bl	@xt_tinit		; terminal init
;	bl	@kinit			; keyboard init
;	bl	@dinit			; device init
;
;	bl	@diskinit		; disk init

	li		r0, (M_INT_EXT + M_INT_VDP) << 8		; external & VDP interrupts
	movb	r0, @INTS
	
	POP		SP, 11
	
	rt				

;==========================================================================
;	VDP Interrupt
;==========================================================================
	incl	int_video.inc

; -----------

;==========================================================================
;	Terminal services XOP entry
;
;	R12: pointer to operand
;	*R14+: command (word)
;
;==========================================================================

xop_term_tbl
	dw		xt_tinit, xt_emitchar 
xop_term_tbl_end equ	$

xop_term_ent
	XopHandler xop_term_tbl 
	
	incl	term.inc
	
;==========================================================================
; 	Video services XOP entry
;
;	R12: pointer to operand
;	*R14+: command (word)
;==========================================================================

xop_video_tbl
	dw		xv_vinit 
xop_video_tbl_end equ	$

xop_video_ent
	XopHandler	xop_video_tbl

	
	incl	video.inc
	
	assert	_SharedRAMEnd <= _WPs
	assert	_RAMEND >= _RAM		; not overflowed 
	assert	_RAMEND <= _SharedRAM	; not overflowed
	
	consttable
	