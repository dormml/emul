\   sysutils.fi
\ 
\   (c) 2010-2011 Edward Swartz
\ 
\   All rights reserved. This program and the accompanying materials
\   are made available under the terms of the Eclipse Public License v1.0
\   which accompanies this distribution, and is available at
\   http://www.eclipse.org/legal/epl-v10.html
\ 

\   Write VWADDR for reading
\   Assumes addr is masked into 0x3fff range
\
:   vwaddr ( addr -- )
    \ dup VDPWA c! swpb VDPWA c!
    VDPWA !
;

\   Write VWADDR for writing
\   Assumes addr is masked into 0x3fff range
\
:   !vwaddr ( addr -- )
    $4000 OR  VDPWA !
;

\   Write VWADDR and page
\
:   +vwaddr ( addr -- )
    vsetbank
    VDPWA !
;

:   +!vwaddr ( addr -- )
    vsetbank
    $4000 OR  VDPWA !
;


:   gwaddr ( addr -- )
    \ dup swpb GPLWA c! GPLWA c!
    GPLWA !
;

:   graddr ( -- addr )
    \ GPLRA c@ 8 lshift  GPLRA c@  or 1-
    GPLRA @ 1- 
;

:   g@  ( addr -- )
    gwaddr  GPLRD c@  GPLRD c@  swap l.h>w
;
:   g!  ( ch addr -- )
    gwaddr  dup swpb GPLWD c!  GPLWD c!
;

:   gc@  ( addr -- )
    gwaddr  GPLRD c@
;
:   gc!  ( ch addr -- )
    gwaddr  GPLWD c!
;

:   vc@  ( addr -- )
    vwaddr  VDPRD c@
;
:   vc!  ( val addr -- )
    !vwaddr  VDPWD c!
;

:   +vc@  ( addr -- )
    +vwaddr  VDPRD c@
;
:   +vc!  ( val addr -- )
    +!vwaddr  VDPWD c!
;

:   vfill ( addr len ch -- )
    2>r !vwaddr
    VDPWD 2r> 0 (cfill) 
;
:   +vfill ( addr len ch -- )
    2>r +!vwaddr
    VDPWD 2r> 0 (cfill) 
;

( GPL to VDP move )
:   +gvmove ( gaddr vaddr len -- )
    rot gwaddr
    swap  +!vwaddr
    GPLRD VDPWD rot  0 0 (cmove)
;

( VDP to CPU move )
\ ::   vcmove ( vaddr addr len -- )
\    vaddr  +vwaddr
\    VDPRD addr len  0 1 (cmove)
\ ;
:   vcmove ( vaddr addr len -- )
    rot  +vwaddr
    VDPRD rot rot  0 1 (cmove)
;

( CPU to VDP move )
\ ::   cvmove ( addr vaddr len -- )
\    vaddr  +!vwaddr
\    addr VDPWD len  1 0 (cmove)
\ ;
:   cvmove ( addr vaddr len -- )
    swap +!vwaddr
    VDPWD swap   1 0 (cmove)
;

( GPL to CPU move )
\ ::   gcmove ( gaddr addr len -- )
\    gaddr  gwaddr
\    GPLRD addr len  0 1 (cmove)
\ ;
:   gcmove ( gaddr addr len -- )
    rot gwaddr
    GPLRD rot rot  0 1 (cmove)
;

( CPU to GPL move )
\ ::   cgmove ( addr gaddr len -- )
\    gaddr  gwaddr
\    addr GPLWD len  1 0 (cmove)
\ ;
:   cgmove ( addr gaddr len -- )
    swap  gwaddr
    GPLWD swap   1 0 (cmove)
;

:   >bit ( mask -- lowest bit# )
    16 0 do
        dup  1 and  if
            drop i unloop exit
        then
        1 urshift
    loop
    
    drop true
;

\ type null-terminated string
: (gtypez) ( gaddr -- gaddr )
    begin
        dup gc@ dup
    while
        emit
        1+
    repeat
    drop  1+
;

\ type null-terminated string
: gtypez ( gaddr --  )
    (gtypez) drop
;

\ type counted string
: gtype ( gaddr cnt -- )
    over + swap ?do i gc@ emit loop 
;

\ copy VDP to VDP, using an auxiliary buffer
s" LOCALS" environment? [IF]
:: vvmove ( vsrc vdst cnt buf n -- )
    0 :> use
    cnt 0 ?do
        cnt i -  n  min  to use
        
        vsrc  dup use + to vsrc 
        buf
        use
        vcmove
        
        buf 
        vdst  dup use + to vdst 
        use 
        cvmove
                
    use +loop    
;
[THEN]

: bitset ( on? mask val -- val )
     rot ( mask val on? )  if  OR  else  swap NAND  then   
;
 
\   Custom:  set a flag in a word
: |!        ( mask addr -- )
    swap over @ OR swap !     
;

( align 'val' to 'scale' )
: %- ( val scale -- val' )
	dup >r  ( r: scale )
    u/mod  nip 
    r>  u*    
;

: w>l.h ( w -- lo hi )
    dup  $ff and  swap  8 urshift  
;

: l.h>w ( lo hi -- w )
    8  LSHIFT  OR  
;

: umax   ( u1 u2 -- u )
    2dup U> if drop else nip then
;
: umin   ( u1 u2 -- u )
    2dup U< if drop else nip then
;
 

 