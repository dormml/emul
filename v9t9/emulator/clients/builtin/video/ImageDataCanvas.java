/**
 * 
 */
package v9t9.emulator.clients.builtin.video;

import java.util.Arrays;

import org.eclipse.swt.graphics.ImageData;
import org.eclipse.swt.graphics.PaletteData;
import org.eclipse.swt.graphics.Rectangle;

import v9t9.engine.memory.ByteMemoryAccess;

/**
 * Render video content into an ImageData
 * @author ejs
 *
 */
public class ImageDataCanvas extends VdpCanvas {
	private static final int X_PADDING = 32;
	private ImageData imageData;
	private int width;
	private int height; 
	
	public ImageDataCanvas() {
		setSize(256, 192);
	}
	
	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#setSize(int, int)
	 */
	@Override
	public void setSize(int width, int height) {
		if (this.width != width || this.height != height) {
			this.width = width;
			this.height = height;
			PaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);
			imageData = new ImageData(width + X_PADDING, height, 24, palette);
		}
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#clear()
	 */
	@Override
	public void clear() {
		byte[] rgb = getColorRGB(clearColor);
		int bpp = imageData.depth >> 3;
		for (int i = 0; i < imageData.data.length; i += bpp) {
			imageData.data[i] = rgb[0];
			imageData.data[i + 1] = rgb[1];
			imageData.data[i + 2] = rgb[2];
		}
		if (imageData.alphaData != null) {
			Arrays.fill(imageData.alphaData, 0, imageData.alphaData.length, (byte)-1);
		}
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#draw8x8TwoColorBlock(int, int, v9t9.engine.memory.ByteMemoryAccess, byte, byte)
	 */
	@Override
	public void draw8x8TwoColorBlock(int r, int c, ByteMemoryAccess pattern,
			byte fg, byte bg) {
		int offs = getBitmapOffset(c, r);
		for (int i = 0; i < 8; i++) {
			byte mem = pattern.memory[pattern.offset + i];
			drawEightPixels(offs, mem, fg, bg);
			offs += imageData.bytesPerLine;
		}

	}

	private void drawEightPixels(int offs, byte mem, byte fg, byte bg) {
		byte[] fgRGB = getColorRGB(fg);
		byte[] bgRGB = getColorRGB(bg);
		for (int i = 0; i < 8; i++) {
			byte[] rgb = (mem & 0x80) != 0 ? fgRGB : bgRGB;
			imageData.data[offs] = rgb[0];
			imageData.data[offs + 1] = rgb[1];
			imageData.data[offs + 2] = rgb[2];
			mem <<= 1;
			offs += 3;
		}
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#draw8x6TwoColorBlock(int, int, v9t9.engine.memory.ByteMemoryAccess, byte, byte)
	 */
	@Override
	public void draw8x6TwoColorBlock(int r, int c, ByteMemoryAccess pattern,
			byte fg, byte bg) {
		int offs = getBitmapOffset(c, r);
		for (int i = 0; i < 8; i++) {
			byte mem = pattern.memory[pattern.offset + i];
			drawSixPixels(offs, mem, fg, bg);
			offs += imageData.bytesPerLine;
		}
	}

	private void drawSixPixels(int offs, byte mem, byte fg, byte bg) {
		byte[] fgRGB = getColorRGB(fg);
		byte[] bgRGB = getColorRGB(bg);
		for (int i = 0; i < 6; i++) {
			byte[] rgb = (mem & 0x80) != 0 ? fgRGB : bgRGB;
			imageData.data[offs++] = rgb[0];
			imageData.data[offs++] = rgb[1];
			imageData.data[offs++] = rgb[2];
			mem <<= 1;
		}
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#draw8x8MultiColorBlock(int, int, v9t9.engine.memory.ByteMemoryAccess, v9t9.engine.memory.ByteMemoryAccess)
	 */
	@Override
	public void draw8x8MultiColorBlock(int r, int c, ByteMemoryAccess pattern,
			ByteMemoryAccess colors) {
		int offs = getBitmapOffset(c, r);
		for (int i = 0; i < 8; i++) {
			byte mem = pattern.memory[pattern.offset + i];
			byte color = colors.memory[colors.offset + i];
			byte fg = (byte) ((color >> 4) & 0xf);
			byte bg = (byte) (color & 0xf);
			drawEightPixels(offs, mem, fg, bg);
			offs += imageData.bytesPerLine;
		}
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#getHeight()
	 */
	@Override
	public int getHeight() {
		return height;
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#getWidth()
	 */
	@Override
	public int getWidth() {
		return width;
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#getBitmapOffset(int, int)
	 */
	@Override
	public int getBitmapOffset(int x, int y) {
		return imageData.bytesPerLine * y + (x + X_PADDING) * (imageData.depth >> 3);
	}

	public int getPixelStride() {
		return imageData.depth >> 3;
	}

	/* (non-Javadoc)
	 * @see v9t9.emulator.clients.builtin.video.VdpCanvas#setColorAtOffset(int, byte)
	 */
	@Override
	public void setColorAtOffset(int offset, byte color) {
		/*
		byte alpha = -1;
		if (color == 0 && clearColor == 0)
			alpha = 0;
		*/
		byte[] rgb = getColorRGB(color);
		imageData.data[offset] = rgb[0];
		imageData.data[offset + 1] = rgb[1];
		imageData.data[offset + 2] = rgb[2];
	}

	public ImageData getImageData() {
		return imageData;
	}

	/** Map the image generated by ImageData to something renderable */
	public Rectangle mapVisible(Rectangle logical) {
		return new Rectangle(logical.x + X_PADDING, logical.y, logical.width, logical.height);
	}
}
