
| : docol!  ( cfa -- )
    drop 
;

| : docon, ( num -- )
    postpone literal
    Iexit c,
;

| : dovalue, ( num -- )
    $79 c, ,
    Iexit c,
;
| : do>to, ( addr -- addr' )
    1+
;

| : dovar,  ( -- )
    IbranchX c,
    Idovar  c,
;


| : douser,  ( idx -- )
    dup $100 < if  Iupidx c, c,  else
                    IlitW c,  ,  Iuser c, then
    Iexit c,                    
;

| : dodoes,  ( -- )
    align
\    here 
    IRfrom c,
;


| : xt! ( addr cfa -- )
    !
;

\ called for creating words to inject :docol code into definition
: docol,    ( addr -- )
;

| : dodefer!    ( cfa -- )
    \ TODO
    drop
;

\ --------------------------------------------


[IFUNDEF] (compile)
\   compile the following word in the IP stream
\   (needed cross compiler)
: (compile)
    r> dup cell+ >r @ , 
;
[THEN]

\ target
| : jmpoffs, ( addr offs -- )
    dup -129 128 within if
        \ dup 0> if 1- else 1- then     \ branch opcode allocated
        1-
        swap c!
    else
        true err-out-of-range ?error
    then
;
| : jmpoffsalloc, ( diff opc -- )
    swap dup -129 128 within if
        dup 0> if 2- else 1- then       \ allocating now
        swap compile, c,
    else
        true err-out-of-range ?error
    then
;


: >fixup
    here 0 c,
;

: loop,
\ loop opcode is one byte
    c,  
;


( when creating a does> word )
: (does>)  
    r> lastxt              ( where dovar, was ) 
    swap  >call swap !    ( call instead of dovar, )  
; target-only


( when compiling a creator word )
: does> 
    here 1 and  if 0 c, then    \ need aligned addr for CALL
    postpone (does>) 
    \ created word is here:  need to fetch PC now
    IRfrom c,
    \ ... and don't return to data of created word!
    \ postpone rdrop 
; immediate target-only

: dodefer, ( -- )
    ['] ;S  >call  ,
    Iexit c,
;

: is-check ( "..." -- is-addr ) 
    '  dup >r
    @  $8000  >=
    r@ cell+ c@  Iexit  =
    and not  err-not-deferred ?error 
    r> 
; 

: is,  ( xt-addr is-addr -- )
  >r  >call  r>   !  
;

: is?,  ( is-addr -- )
    @  call>
;
