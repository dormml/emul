
( In the terminal, characters are located by a video-mode-specific
position in a video-mode-specific window.  I.e. for text modes
they represent characters, and for graphics modes, they 
represent pixels.  These are called "units" here.

The video mode determines how to advance the cursor based on
the current font.
)

0   RamVar  t-data

t-data
    ( cursor position, in units )
    +field  v-x             \ cursor x unit
    +field  v-y             \ cursor y unit

    ( window attributes, in units )
    +field  win-x
    +field  win-y
    +field  win-sx
    +field  win-sy
    
t-data over -  Constant t-data-size

ramptr !

\   Reset terminal from the current mode
: term-reset
    0 win-x !
    0 win-y !

    v-width @   win-sx  !
    v-height @  win-sy  !
    
    home
;

1 <export
:   home
    0 v-x !
    0 v-y !
;

:   xy ( -- v-x v-y )
    v-x @  v-y @
;

:   xy! ( x y  -- )
    v-y !  v-x !
;
export>

:   curs-addr ( -- addr bit )
    v-x @ win-x @ +  
    v-y @ win-y @ +  
    'v-coordaddr @  execute
;

:   home-col
    0 v-x !
;

:   ch>xy ( ch -- xs ys )
    'v-chsize @  execute
;
:   ch>y ( ch -- ys )
    ch>xy nip   
;
:   ch>x ( ch -- xs )
    ch>xy drop   
;


:   advance-row 
    v-y @  32 ch>y  +   
    dup win-sy @ >= if
       drop 0
    then
    v-y !
;

:   advance-cursor ( ch -- )
    ch>x  v-x @  +   
    dup win-sx @ >= if
        drop 0
        advance-row 
    then
    v-x !
;

:   cursor-off
    xy v-cursor-off
;

:   crlf
    advance-row
    home-col 
;  

:   bksp ( ch -- )
    ch>xy  negate :> y  negate :> x   
    x v-x +!
    v-x @ 0< if
        win-sx @ x +  v-x !
        y v-y +!
        v-y @ 0< if
            win-sy @ y +  v-y !
        then
    then
;

1 <EXPORT

::   chfill  ( ch -- )
    home
    ch ch>xy  v-height @ swap u/ :> rows  v-width @ swap u/ :> cnt
    rows 0 do
        ch cnt hchar
        advance-row
    loop
;

:   hchar ( ch len -- ) 
    'v-hchar @  ?dup if
        >r  xy  r>  execute
    else
        xy 2>r
        0 do  dup  (emit) dup  advance-cursor  loop  drop
        2r> xy!
    then
;

:   vchar ( ch len -- ) 
    'v-vchar @  ?dup if
        >r  xy  r>  execute
    else
        over ch>xy :> ys :> xs
        v-y @ :> origvy
        xy 2>r
        0 do  
            dup  (emit) 
            v-y @  ys +  win-sy @ umod  dup v-y !  
            origvy = if
                v-x @ xs +  win-sx @ umod  v-x !
            then   
        loop  drop
        2r> xy!
    then
;

:   cls  
    'v-clear @  execute  
    home
;

:   (emit)  ( ch -- )
    xy  'v-drawchar @  execute  
;

:   emit    ( ch -- )
    cursor-off
    dup 13 = if
        drop crlf
    else dup 8 = if
        drop 32 bksp
    else
        dup  (emit) advance-cursor
    then then 
;    target-only

:   getch    ( x y -- ch )
    'v-readchar @  ?dup if
        execute
    else
        2drop -1
    then
;

:   cr  13 emit  ; 
:   space  32 emit  ;

:   type ( caddr n -- )
    over + swap do i c@ emit loop     
;

EXPORT>


