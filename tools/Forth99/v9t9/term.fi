
cell    RamVar vx
cell    RamVar vy

0 Value win-x
0 Value win-y
0 Value win-sx
0 Value win-sy

: term-refresh
    v-width @ v-chwidth c@ u/  v-ccols c!
    v-height @ v-chheight c@ u/  v-crows c!
;

\   Reset terminal from the current mode
: term-reset
    0 to win-x
    0 to win-y
    
    term-refresh
    
    v-ccols c@  to win-sx
    v-crows c@  to win-sy
    
    home
;

:   home
    0 vx !
    0 vy !
;

:   xy ( -- vx vy )
    vx @  vy @
;

:   xy! ( x y  -- )
    vy !  vx !
;

:   curs-addr ( -- addr bit )
    vx @ win-x +  
    vy @ win-y +  
    'v-coordaddr @  execute
;

:   advance-row
    0 vx !  1 vy +!  
    vy @ win-sy >= if
        0 vy !
    then
;

:   advance-cursor
    1 vx +!  
    vx @ win-sx >= if
        advance-row 
    then   
;


:   cursor-off
    curs-addr v-cursor-off
;

:   crlf
    advance-row 
;  

:   bksp
    -1 vx +!
    vx @ 0< if
        win-sx 1-  vx !
        -1 vy +!
        vy @ 0< if
            win-sy 1-  vy !
        then
    then
;

1 <EXPORT

:   chfill  ( ch -- )
    home
    v-crows c@  0 do
        dup  v-ccols c@  hchar
        advance-row 
    loop
    drop
;

:   hchar ( ch len -- ) 
    'v-hchar @  ?dup if
        >r  curs-addr  r>  execute
    else
        xy 2>r
        0 do  dup  (emit) advance-cursor  loop  drop
        2r> xy!
    then
;

:   vchar ( ch len -- ) 
    'v-vchar @  ?dup if
        >r  curs-addr  r>  execute
    else
        xy 2>r
        0 do  dup  (emit) advance-row  loop  drop  
        2r> xy!
    then
;

:   cls  
    'v-clear @  execute  
    home
;

:   (emit)
    curs-addr  'v-drawchar @  execute  
;

:   emit    ( ch -- )
    cursor-off
    dup 13 = if
        drop crlf
    else dup 8 = if
        drop bksp
    else
        (emit) advance-cursor
    then then 
;    target-only

:   cr  13 emit  ; 
:   space  32 emit  ;

:   type ( caddr n -- )
    over + swap do i c@ emit loop     
;

EXPORT>


