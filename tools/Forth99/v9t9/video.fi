
(
To deal uniformly with text and graphics modes, the video
mode data uses this data for the attributes and methods 
associated with each mode.
 
For use by the terminal, characters are located by a video-mode-specific
position in a video-mode-specific window.  I.e. for text modes
they represent characters, and for graphics modes, they 
represent pixels.  These are called "units" here.

The video mode determines how to advance the cursor based on
the current font.
)

0      RamVar  v-data

v-data
    +field  v-screen       \ VDP addr of screen
    +field  v-screensz     \ VDP size of screen
    +field  v-patts        \ VDP addr of patterns
    +field  v-pattsz       \ VDP size of pattern table
    +field  v-colors       \ VDP addr of colors
    +field  v-colorsz      \ VDP size of color table
    +field  v-sprites      \ VDP addr of sprites
    +field  v-sprcol       \ VDP addr of sprite color table (0 if not sprite 2 mode)
    +field  v-sprpat       \ VDP addr of sprite patterns
    +field  v-sprmot       \ VDP addr of sprite motion
    +field  v-free         \ usable space
    
    +1field v-mono         \ set if monochrome (colors are global)
    
    +field  v-width        \ units across
    +field  v-height       \ units down
    
    +field  v-font         \ GROM addr of current font
    +1field v-fntwidth     \ font width in pixels
    +1field v-fntheight    \ font height in pixels

    
    +field  'v-chsize       ( ch -- xs ys )
    +field  'v-coordaddr    ( x y -- addr bit )
    +field  'v-drawchar     ( ch x y -- )
    +field  'v-readchar     ( x y -- ch )
    +field  'v-blinkcursor   ( x y -- )
    +field  'v-setupmode    ( -- )
    +field  'v-updatecolors ( -- )
    +field  'v-setfont      ( addr -- )
    +field  'v-clear        ( ch -- )
    +field  'v-hchar        ( ch len x y -- )
    +field  'v-vchar        ( ch len x y -- )

    +field  bit-cursor      \ addr of cursor shape

    +field  msx-stride      \ row stride in bytes
    +field  msx-shift       \ shift for pixel >> byte
    +field  msx-mask        \ mask for pixel of byte

    16 +Nfield v-regsave    \ saved registers

dup v-data - negate  Constant v-data-size

ramptr ! 


\ -------------------------------------------------------------------------

:   w>b ( w -- lo hi )
    dup $ff and swap 8 urshift  
;

:   write-vregaddr ( reg -- )
    dup  
    vwaddr
    $7fff and w>b   dup 16 <  if  v-regsave + c!  else 2drop then
;

:   get-vreg ( reg# -- val )
    v-regsave + c@
;

\   (Not a good reason for locals, since they're much slower, but just have something for now)

::   write-vregs ( reglist -- )
    begin 
        reglist @ dup
    while
        write-vregaddr
        2 'reglist +!
    repeat   
    drop
;

: vid-show ( f -- )
    $40 and 
    1 get-vreg  or
    $8100 or  write-vregaddr
;

\ ---------------------

: >v-fontaddr   ( ch -- )
    v-fntheight c@ u*  v-font @ +
;

\ Save space for content under the blinking cursor 
8   RamVar v-curs-under  

1   RamVar v-curs                         \ state of cursor (0=off, $80=on)
1   RamVar v-cursor-timer                 \ current iter

20 Constant v-cursor-blink              \ 30/60 sec
 
:   write-var-list   ( table -- )
    begin
        dup @ 
    while
        dup  d@  swap !
        4 +
    repeat
    drop
;

: (mode)
    dup  0 last-video-mode within  0= -&24 ?error
    cells  video-modes +  @ 
    
    dup 0= -&13 ?error
    
    v-font @  v-fntwidth c@  v-fntheight c@
    0  v-data v-data-size -1  (cfill)     \ v-data is end 
    v-fntheight c!  v-fntwidth c!  v-font !
    
    execute
;

1   RamVar fg
1   RamVar bg

: color-byte
    fg c@ 4 lshift  bg c@ $f and  or
;
: color-word
    fg c@ 8 lshift  bg c@ $ff and  or
;

: v-refresh-colors
    'v-updatecolors @  execute
;

1 <export
: fg!
    $ff and  fg c!
    v-refresh-colors
;

: bg!
    $ff and  bg c!
    v-refresh-colors
;

: fg@
    fg c@
;   

: bg@
    bg c@
;

export>

\   Reset video state
\
\   -- reset terminal bounds
\   -- clear memory
\   -- load font (if needed)

: vreset
    'v-setupmode @  execute
    
    v-refresh-colors
    
    (setfont)

    term-reset
    cls    
    
    true vid-show
;

: vstdpal

;


:   v-cursor-off  ( x y -- )
    v-curs c@ if
        'v-blinkcursor @ execute
    else
        2drop
    then
;

:   update-cursor
    1 v-cursor-timer c+!
    v-cursor-timer c@  v-cursor-blink >= if
        0 v-cursor-timer c!
        xy
        'v-blinkcursor @ execute
    then
;


\ ---------------------

Create video-modes
    ' text-mode ,
    ' gfx-mode ,
    ' bit-mode ,
    ' gfx3-mode ,
    ' gfx4-mode ,
    0 ,
    0 ,
    0 ,
    ' text2-mode ,
    ' mono-mode ,
    0 ,
    
1 <export
$000    constant    text
$001    constant    gfx
$002    constant    bitmap      $002    constant    gfx2
$003    constant    gfx3           
$004    constant    gfx4
$005    constant    gfx5
$006    constant    gfx6
$007    constant    gfx7
$008    constant    text2
$009    constant    mono
$00A    constant    multi
export>

$00B    constant    last-video-mode

1 <export
\ tables for (vtab)
&0 constant #scr
&1 constant #ssz
&2 constant #col
&3 constant #csz
&4 constant #pat
&5 constant #psz
&6 constant #spt
&7 constant #spr
&8 constant #smt
&9 constant #spc
&10 constant #fre
export>

include video_text.fi
include video_bit.fi
include video_msx.fi


\ ---------------------

1 <EXPORT

:   mode ( num -- )
    (mode) vreset vstdpal
;


:   vfill ( ch addr len -- )
    swap +!vwaddr
    VDPWD swap 0 (cfill) 
;

:   (setfont)
    v-font @  'v-setfont @  execute
;

:   font8x8
    grom_font8x8 v-font !
    8 v-fntwidth c!   8 v-fntheight c!
    (setfont)
;

EXPORT>


:   video-init
    \ reset latches
    VDPRD c@ drop
    0 GPLWD c! 
    
    text mode

    $1 fg!
    $7 bg!
    
    font8x8    
    
;


