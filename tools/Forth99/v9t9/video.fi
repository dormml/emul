
0      RamVar  v-data

v-data

|+    +field  v-screen       \ VDP addr of screen
|+    +field  v-screensz     \ VDP size of screen
|+    +field  v-patts        \ VDP addr of patterns
|+    +field  v-pattsz       \ VDP size of pattern table
|+    +field  v-colors       \ VDP addr of colors
|+    +field  v-colorsz      \ VDP size of color table
|+    +field  v-sprites      \ VDP addr of sprites
|+    +field  v-sprcol       \ VDP addr of sprite color table (0 if not sprite 2 mode)
|+    +field  v-sprpat       \ VDP addr of sprite patterns
|+    +field  v-sprmot       \ VDP addr of sprite motion
|+    +field  v-free         \ usable space (if no pages)
    +field  v-pagesize     \ size of a page
    
    +1field v-text         \ set if mode is text-based
    +1field v-mono         \ set if monochrome (colors are global)
    
    +field  v-width        \ units across
    +field  v-height       \ units down
    
    +field  v-font         \ GROM addr of current font
    
    +1field v-fntwidth     \ font width in pixels
    +1field v-fntheight    \ font height in pixels

    +1field  v-intflags    \ video interrupt flags
    +1field  v-blink       \ if set, set blink flag for text2 chars 
    
    +field  v-allocinfo    \ list of memory allocations for page 0
    
    +1field v-rwpage       \ current r/w page
    +1field v-vispage      \ current visible page
    +1field v-pob          \ page offset bank -- for >64K access
    +1field v-unused
    
  4 +Nfield v-initpages    \ bitmask of pages that have been initialized for this mode
    
    +field  'v-setupregs    ( -- )
    +field  'v-drawchar     ( ch x y -- )
    +field  'v-readchar     ( x y -- ch )
    +field  'v-blinkcursor   ( x y -- )
    +field  'v-setupmode    ( -- )
    +field  'v-updatecolors ( -- )
    +field  'v-setfont      ( addr -- )
    +field  'v-clear        ( w h x y -- )
    +field  'v-hchar        ( ch len x y -- )
    +field  'v-vchar        ( ch len x y -- )

    +field  msx-stride      \ row stride in bytes
    +field  msx-shift       \ shift for pixel >> byte
    +field  msx-mask        \ mask for pixel of byte
    +field  msx-colmask     \ mask for available colors

    +field  msx-rowsperbankmask  \ mask for detecting bank crossings  
    
    16 +Nfield v-regsave    \ saved registers

dup constant v-data0

dup v-data - negate  Constant v-data-size

ramptr ! 

$80 constant    v-int-nosprmot
$40 constant    v-int-nocursor

\ -------------------------------------------------------------------------

:   >vr         ( val reg -- )
    dup 16 <  if  v-regsave + c!  else 2drop then    
;

:   v-regaddr ( reg -- )
    dup  
    vwaddr
    dup $9000 < if
        $7fff and w>b   >vr
    else
        drop
    then
;

1 <export

:   (vr!)       ( val reg -- )
    2dup >vr
    
    \ write VDP addr
    8 lshift $8000 OR  OR  vwaddr
;


:   (vr@) ( reg# -- val )
    v-regsave + c@
;

export>

\   (Not a good reason for locals, since they're much slower, but just have something for now)

::   write-vregs ( reglist -- )
    begin 
        reglist @ dup
    while
        v-regaddr
        2 'reglist +!
    repeat   
    drop
;

: vid-show ( f -- )
    $40  1 (vr@)  rot  if OR else NAND then
    $8100 or  v-regaddr
;

\ ---------------------

: std-set-screen-reg
    v-screen @  10 URSHIFT
    v-pob c@  4 LSHIFT OR  
    2  (vr!) 
;

: std-set-color-reg
    v-colors @  6 URSHIFT   w>b
    v-pob c@  OR
    $7 and  10 (vr!)
            3  (vr!)
;

: std-set-patt-reg
    v-patts @  11 URSHIFT   
    v-pob c@  3 LSHIFT OR
    4 (vr!)
;

: std-set-sprite-reg
    v-sprites @  7 URSHIFT   w>b
    
    v-pob c@  1 URSHIFT OR
    11 (vr!)
    
    5  (vr!)
;

: std-set-sprpat-reg
    v-sprpat @  11 URSHIFT   
    v-pob c@  3 LSHIFT OR
    6 (vr!)
;


\ ---------------------

: >v-fontaddr   ( ch -- )
    v-fntheight c@ u*  v-font @ +
;

\ Save space for content under the blinking cursor 
8   RamVar v-curs-under  

1   RamVar v-curs                         \ state of cursor (0=off, $80=on)
1   RamVar v-cursor-timer                 \ current iter

20 Constant v-cursor-blink              \ 30/60 sec
 
:   write-var-list   ( table -- )
    begin
        dup @ 
    while
        dup  d@  swap !
        4 +
    repeat
    drop
;

:   v-set-alloc-list ( table -- )
    dup write-var-list
    v-allocinfo !
;

|+ : (mode)
    cursor-off

    dup  0 last-video-mode within  0= err-out-of-range ?error
    cells  video-modes +  @ 
    
    dup 0= err-undefined ?error
    
    v-font @  v-fntwidth c@  v-fntheight c@
    0  v-data v-data-size -1  (cfill)     \ v-data is end 
    v-fntheight c!  v-fntwidth c!  v-font !

    ( mode ) execute
    
    0.0 v-initpages D!
    
    0 vpage    
;

1   RamVar fg
1   RamVar bg

: color-byte
    fg c@ 4 lshift  bg c@ $f and  or
;
: color-word
    fg c@ 8 lshift  bg c@ $ff and  or
;

: v-refresh-colors
    'v-updatecolors @  execute
;

1 <export
: fg!
    $ff and  fg c!
    v-refresh-colors
;

: bg!
    $ff and  bg c!
    v-refresh-colors
;

: fg@
    fg c@
;   

: bg@
    bg c@
;

export>

\   Reset video state
\
\   -- reset terminal bounds
\   -- clear memory
\   -- load font (if needed)

Create msx-enhregs
    $8808 ,     \ 64k video RAM
    $8E00 ,     \ set bank 0, page 0, etc
    $8980 ,     \ 212-line mode, color, etc
    $8C00 ,     \ turn off alt colors
    $8D00 ,     \ turn off blink/pageswap
    $8F00 ,     \ point to sr0
    0 ,

|+ : (vreset)
    \ the chip itself is always enhanced
    msx-enhregs write-vregs

    'v-setupmode @  execute

    term-reset
    
    true vid-show
;             

|+ : vreset
    (vreset)

    v-refresh-colors
    
    (setfont)

    v-width @ v-height @  0 0  'v-clear @  execute    

    term-reset
;

|+ : vstdpal
    0 16 (vr!)
    32 0 do 
        msx-stdpalette i + c@  VDPCL c!
    loop
;


:   v-cursor-off  ( x y -- )
    v-curs c@ if
        'v-blinkcursor @ execute
    else
        2drop
    then
;

:   update-cursor
    1 v-cursor-timer c+!
    v-cursor-timer c@  v-cursor-blink >= if
        0 v-cursor-timer c!
        $xy
        'v-blinkcursor @ execute
    then
;


\ ---------------------

Create video-modes
    ' text-mode ,
    ' gfx-mode ,
    ' bit-mode ,
    ' gfx3-mode ,
    ' gfx4-mode ,
    ' gfx5-mode ,
    ' gfx6-mode ,
    ' gfx7-mode ,
    ' text2-mode ,
    ' mono-mode ,
    0 ,
    
1 <export
$000    constant    text
$001    constant    gfx
$002    constant    bitmap      $002    constant    gfx2
$003    constant    gfx3           
$004    constant    gfx4
$005    constant    gfx5
$006    constant    gfx6
$007    constant    gfx7
$008    constant    text2
$009    constant    mono
$00A    constant    multi
export>

$00B    constant    last-video-mode

1 <export
\ tables for (vtab)
&0 constant #scr
&1 constant #ssz
&2 constant #col
&3 constant #csz
&4 constant #pat
&5 constant #psz
&6 constant #spt
&7 constant #spr
&8 constant #smt
&9 constant #spc
&10 constant #fre
export>



: (sprite-setup)
    $00  v-sprites @  $80  +vfill
    $00  v-sprpat @   $800 +vfill
    $00  v-sprmot @   $80  +vfill
;

: std-sprite-setup
    (sprite-setup)
    $D0  v-sprites @ +vc!
;

: v9938-sprite-setup
    (sprite-setup)
    $D8  v-sprites @ +vc!
    $00  v-sprcol @  $200  +vfill
;


include video_text.fi
include video_bit.fi
include video_msx.fi


\ ---------------------

1 <EXPORT

:   mode ( num -- )
    (mode) vreset vstdpal
;


:   (setfont)
    v-font @  'v-setfont @  execute
    term-refresh
;

:   font8x8
    grom_font8x8 v-font !
    8 v-fntwidth c!   8 v-fntheight c!
    (setfont)
;
:   font6x8
    grom_font8x8 v-font !
    6 v-fntwidth c!   8 v-fntheight c!
    (setfont)
;
:   font5x6
    grom_font5x6 v-font !
    5 v-fntwidth c!   6 v-fntheight c!
    (setfont)
;

: <video    ( -- flags )
    cursor-off
    v-intflags c@
    [ v-int-nosprmot v-int-nocursor or literal ] v-intflags c! 
;

: video>  ( oldflags -- )
    v-intflags c!
;

( get size of save area )
:   #vrs ( -- n )
    v-data-size t-data-size +
;

( save video state: needs buffer of v-data-size size )
:: vsave  ( buff -- )
    v-data0  buff                 v-data-size  cmove 
    t-data0  buff  v-data-size +  t-data-size  cmove 
;

( restore video state: needs buffer of v-data-size size )
:: vrestore  ( buff -- )
    buff  v-data0                 v-data-size  cmove 
    buff  v-data-size +  t-data0  t-data-size  cmove
    
    16 0 do
        v-regsave i + c@  $8000  i 8 lshift  OR  OR  vwaddr
    loop 
;

: vblink!  ( flag -- )
    0= invert  v-blink c!
;

( set the page where data is read/written:
    update v-pob and all the table addresses
    to match
)
:: vrwpage    ( pg -- )
    cursor-off
    
    \ write base values 
    v-allocinfo @  write-var-list

    \ reduce page to valid range    
    pg  
    $2.0000  v-pagesize @  ?dup if  UM/MOD  then  nip  
    UMOD
    dup  v-rwpage c!
    
    \ get page offset
    ( pg ) v-pagesize @ ?dup if  UM*  ( lo hi )  else  0 swap  then  
    
    \ bits A15-A14 are set via vsetbank, et al, into R14 automatically
    \ bit A16 is set in R14 via v-pob.  This is also applied when
    \ setting registers.
    $1 and  2 lshift  v-pob c!
    
    :> offs
    
    offs    v-screen +!
    offs    v-patts +!
    offs    v-colors +!
    offs    v-sprites +!
    offs    v-sprmot +!
    offs    v-sprpat +!
    offs    v-sprcol +!
    
    \ init page if not yet set up
    1.  v-rwpage c@  s>d  dlshift  :> pmaskH :> pmaskL
    pmaskL pmaskH  v-initpages d@  DAND  D0=  if
        (vreset)
        pmaskL  v-initpages  |!
        pmaskH  v-initpages 2+  |!
    then
;

( set the visible page:
    for each table address for the given page,
    update video regs to match. 
)
:: vvispage  ( pg -- )
    \ save current values...
    v-screen @  v-patts @  v-colors @  
    v-sprites @  v-sprmot @  v-sprpat @  v-sprcol @
    v-pob c@  v-rwpage c@  
    
    pg  vpage 
        
    \ restore original values...
    v-rwpage c!  v-pob c!
    v-sprcol !  v-sprpat !  v-sprmot !  v-sprites !
    v-colors !  v-patts !  v-screen !
;

( set the visible and read/write page )
: vpage ( pg -- )
    vrwpage
    
    v-rwpage c@  v-vispage c!
    
    'v-setupregs @  execute
;

EXPORT>

:   video-init
    \ reset latches
    VDPRD c@ drop
    0 GPLWD c! 

    0 v-pob c!
    0 v-intflags c!
        
    text mode

    $1 fg!
    $7 bg!
    
    font8x8    
    
;


