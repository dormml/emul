
Create bit-cursor-8
    $00 c,  $7c c,  $44 c, $44 c, $44 c,  $7c c, $00 c, $00 c,
     
cell    RamVar  bit-cursor

: bit-chsize ( ch -- xs ys )
    drop  v-fntwidth c@  v-fntheight c@
;

\   Figure the address and shift for a pixel on the screen
: bit-pixaddr ( x y -- addr shift )
    ( Y -> row offs )
    dup  5 lshift  OR  $ff07  AND  >R
    
    dup  
    R>  +
    
    ( X -> byte offs and shift )
    swap  7 AND  dup >R  -
    R>
;    

: bit-waddr ( x y -- )
    bit-pixaddr drop  !vwaddr  
;
: bit-raddr ( x y -- )
    bit-pixaddr drop  vwaddr  
;


: bit-setupmode
    ( set repeating 0-255 in three sections of SIT )
    v-screen @  !vwaddr
    768 0 do i  VDPWD c!  loop
;

: bit-drawchar ( ch x y -- )
    \ simple-stupid 8x8 only version 
    bit-pixaddr drop  :> addr
    >v-fontaddr  addr v-patts @ +  v-fntheight c@  gvmove  
    
    v-mono c@ 0= if
        color-byte
        addr  v-colors @ +
        v-fntheight c@  vfill
    then
;

:: (set-bits) ( bits vaddr baddr -- )
    vaddr vwaddr  VDPRD c@  
        dup baddr c!
    vaddr !vwaddr  
        bits OR  VDPWD c!
;
: (reset-bits) ( bits vaddr baddr -- )
    swap  !vwaddr  c@  VDPWD c!  drop
;

: bit-blinkcursor ( x y -- )
    bit-pixaddr  :> shift  
                v-patts @ + :> addr     \ only change patt

    addr vsetbank  addr!

    \ pattern    
    $c0c0 shift CRSHIFT  :> bits
    
    \ based on the cursor mode, we either save + modify or restore the bits under the cursor
    $80 v-curs c+!
    v-curs c@ if
        ['] (set-bits)
    else
        ['] (reset-bits)
    then
    
    :> changer
    
    v-fntheight c@  0  do
        bits addr
        v-curs-under i +  changer execute
        
        \ simple-stupid
        1 'addr +!
    loop
;

: bit-clear ( ch -- )
    0           v-patts @   v-pattsz @   vfill
    color-byte  v-colors @  v-colorsz @  vfill
;

: bit-updatecolors ( -- )
    color-byte dup  $8700 OR  write-vregaddr
    v-mono c@ if
        v-colors @  v-colorsz @  vfill
    else
        drop
    then
;

: bit-setfont   ( addr -- )
    drop
    \ TODO: support for non-8-pixel fonts 
    8 v-fntwidth c!
    bit-cursor-8  bit-cursor ! 
;


Create BitFunctions
    'v-chsize ,          ' bit-chsize ,
    'v-drawchar ,        ' bit-drawchar ,
    'v-blinkcursor ,     ' bit-blinkcursor ,
    'v-setfont ,         ' bit-setfont ,
    'v-clear ,           ' bit-clear ,
    0 , 



\       2=bitmap mode (graphics 2 mode)
\           >0000 = patts
\           >1800 = screen
\           >1B00 = sprites
\           >1B80 = sprite motion
\           >1C00 = sprite patts    (really >1800)
\           >2000 = colors
\           >3800+= free
\
Create BitModeRegs
    $8002 , $81A0 , $8206 , $83FF , $8403 , $8536 , $8603 , 0 ,

Create BitModeParams
    v-screen    , $1800 ,   v-screensz  , $300 ,
    v-colors    , $2000 ,   v-colorsz   , $1800 ,   
    v-patts     , $0000 ,   v-pattsz    , $1800 ,
    v-sprites   , $1B00 ,   v-sprcol    , 0 ,
    v-sprpat    , $1800 ,   v-sprmot    , $1B80 ,
    v-free      , $3800 ,

    v-width     , 256 ,     v-height    , 192 ,
    
    'v-setupmode ,           ' bit-setupmode ,
    'v-updatecolors ,        ' bit-updatecolors ,

    0 ,
    
    
: bit-mode
    BitFunctions write-var-list
    BitModeParams write-var-list
        
    BitModeRegs write-vregs
;


\      9=monochrome bitmap mode (graphics 2 mode)
\           >0000 = patts
\           >1800 = screen
\           >1B00 = sprites
\           >1B80 = sprite motion
\           >1C00 = sprite patts    (really >1800)
\           >2000 = colors
\           >2040+= free (seems like 2800)
\
Create MonoBitModeRegs
    $8002 , $81B0 , $8206 , $8380 , $8403 , $8536 , $8603 , 0 ,

    
: mono-mode
    BitFunctions write-var-list
    BitModeParams write-var-list
    
    $40 v-colorsz !
    $2040 v-free !
    
    true v-mono c!
        
    MonoBitModeRegs write-vregs
;


\       3=graphics 3 mode (256x192x8+8), sprites 2
\           >0000 = patts
\           >1800 = sprite patts
\           >1900 = sprite colors
\           >1B00 = sprites
\           >1B80 = sprite motion
\           >1C00 = sprite patts ( really >1800)
\           >2000 = colors
\           >3800 = screen
\           >3B00+= free
\
Create Gfx3ModeRegs
    $8004 , $81A0 , $820E , $83FF , $8403 , $8536 , $8B00 , $8603 , 0 ,
    
Create Gfx3ModeParams
    v-screen    , $3800 ,   v-screensz  , $300 ,
    v-colors    , $2000 ,   v-colorsz   , $1800 ,   
    v-patts     , $0000 ,   v-pattsz    , $1800 ,
    v-sprites   , $1B00 ,   v-sprcol    , $1900 ,
    v-sprpat    , $1800 ,   v-sprmot    , $1B80 ,
    v-free      , $3B00 ,

    v-width     , 256 ,     v-height    , 192 ,
    
    'v-setupmode ,           ' bit-setupmode ,
    'v-updatecolors ,        ' bit-updatecolors ,

    0 ,
    
    
: gfx3-mode
    BitFunctions write-var-list
    Gfx3ModeParams write-var-list
    Gfx3ModeRegs write-vregs
;

