\   dict.fs                     -- FORTH dictionary manipulation
\
\   (c) 1996-2009 Edward Swartz
\
\   This program is free software; you can redistribute it and/or modify
\   it under the terms of the GNU General Public License as published by
\   the Free Software Foundation; either version 2 of the License, or
\   (at your option) any later version.
\ 
\   This program is distributed in the hope that it will be useful, but
\   WITHOUT ANY WARRANTY; without even the implied warranty of
\   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
\   General Public License for more details.
\ 
\   You should have received a copy of the GNU General Public License
\   along with this program; if not, write to the Free Software
\   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
\   02111-1307, USA.  
\
\   $Id: dict.fs,v 1.15 2009-02-25 02:18:24 ejs Exp $

\   These cover memory spaces, threading and compiler issues
\   related to structure of the dictionary.
\

| User >latest        \ latest definition (gaddr)

\   Return latest definition's nfa (gaddr)
: latest
    >latest @
;

| $1F constant &nmask
| $40 constant |immed
| $80 constant |srch

\   \\\\\\\\\\\\\\

\   Custom dictionary stuff


| : nfa>xt@ ( gaddr -- xtaddr )
    dup  gc@ &nmask AND  \ get the length byte
    + 1+                \ skip length and name

    \ [ has? profiling [if] ] cell+ [ [then] ]

;
: nfa>xt ( gaddr -- xt )
    nfa>xt@  g@
;

: xt>nfa    ( xt -- gaddr )
    \ xt -> nfa
    \ [ has? profiling [if] ] #cell - [ [then] ]

    >r

    \ latest
    >gram_dict_base
    begin
        dup GDP @ < if 
            dup  nfa>xt@  dup g@  r@  = 
            if  drop rdrop  exit  then
            nip 2+
        else
            rdrop exit
        then
    again
;

test" xt>nfa ['] traverse xt>nfa c@ $88 = "
test" nfa>xt ['] traverse dup xt>nfa nfa>xt = "


| : nfa>imm?  ( gnfa -- t/f )
    gc@ |immed and 0<>
;

| : GCOUNT
    dup gc@ swap 1+ swap
;


: >id       ( gnfa -- caddr u )
    gcount &nmask and 
;

: id.       ( gnfa -- )
    >id gtype space
;

\   \\\\\\\\\\\\\\\\\

\   dictionary words

[IFUNDEF] DP
User DP
[THEN]

User GDP              \ GROM dictionary pointer

[IFUNDEF] '
: ' 
\   Skip leading space delimiters. Parse name delimited by a space. Find name and return xt, the execution token for name. An
\   ambiguous condition exists if name is not found.
\
\   Similarly, the use of ' and ['] with compiling words is unclear if the precise compilation behavior of those words is not
\   specified, so ANS Forth does not permit a Standard Program to use ' or ['] with compiling words.
    parse-def-name 
    0= if  count type  err-undefined message abort  then      \ !!!
;
[THEN]

[IFUNDEF] ,
: ,
\   Reserve one cell of data space and store x in the cell. If the data-space pointer is aligned when , begins execution, it
\   will remain aligned when , finishes execution. An ambiguous condition exists if the data-space pointer is not aligned
\   prior to execution of ,.
    here ! #cell dp +!  
;
[THEN]

[IFUNDEF] >BODY
\ : >BODY
\ \        ( xt -- a-addr )
\ \   a-addr is the data-field address corresponding to xt. An ambiguous condition exists if xt is not for a word defined via
\ \   CREATE.
\ 2 cells +
\ ;
[THEN]

[IFUNDEF] ALIGN
: ALIGN
    here aligned dp !
;
[THEN]

[IFUNDEF] ALIGNED
: ALIGNED   ( addr -- addr )
    #cell  1-  swap over +  swap and
;
[THEN]

[IFUNDEF] ALLOT
: ALLOT
    here + dp !
;
[THEN]

[IFUNDEF] C,
: C,
    here c!  1  dp +!
;
[THEN]

[IFUNDEF] FIND

: FIND  \ ( c-addr -- c-addr 0  |  xt 1  |  xt -1 )
\   Find the definition named in the counted string at c-addr. If the definition is not found after searching all the word
\   lists in the search order, return c-addr and zero. If the definition is found, return xt. If the definition is immediate,
\   also return one (1); otherwise also return minus-one (-1). For a given string, the values returned by FIND while compiling
\   may differ from those returned while not compiling.

    \ remember caddr
    dup >r
    
    \ search locals
    'lfind @ ?dup if
        execute
        ?dup if rdrop exit then
    then
    
    \ search GRAM dictionary
    >gram_dict_base  GDP @  (gfind)
    ?dup if rdrop exit then
    
    \ fall back to GROM dictionary
    drop
    r>   
    >grom_dict g@  >grom_dictend g@  (gfind)
;


| : (lookup)      ( c-addr u -- caddr 0 | xt 1=immed | xt -1 )
    here (>c)   \ make counted string + NFA
    here 
    find
;

[THEN]


[IFUNDEF] HERE
: HERE
    dp @
;
[THEN]

[IFUNDEF] [']
: [']
    ' postpone literal
; immediate
[THEN]

[IFUNDEF] IMMEDIATE
: IMMEDIATE
    latest  dup gc@  |immed or  swap gc!
;
[THEN]

[IFUNDEF] UNUSED
: UNUSED
    RamTop  here  -
;
[THEN]

[IFUNDEF] WORDS
| : dwalk ( root xt -- )  ( xt: nfa -- 0 | 1 )
    >r
    begin
        dup GDP @ <    
    while
        \ work on current NFA
        dup r@ execute   ( nfa flag )
        if 
            drop rdrop exit
        then 
        \ skip NFA and XT
        nfa>xt@  cell+  
    repeat
    drop rdrop
;

| : .word ( nfa -- 0 continue | 1 stop )
   id. (pause?) 
;

: WORDS
    >gram_dict_base      \ !!! need real wordlist
    ?dup if 
        ['] .word 
        dwalk 
    then
;
[THEN]

[ifundef] FORGET
: FORGET 
    '   dup  0=  err-undefined ?error
    dup  dp !
    
    xt>nfa      
    dup  >latest !
    gdp !
;

[endif]


