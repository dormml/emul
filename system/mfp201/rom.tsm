
;
;
;

; status bits

INTS	equ >20

; memory locations

VRAM	equ >e000

MODE0SCREEN equ VRAM

; ============
; variables


	aorg >f000
	
reset:
	ldc #>e000, SP
	
	; initialize watchdog
	
	; initialize peripherals
	
	; turn on interrupts
	or INTS, SR

	br clrscr
	
	br idle
	
int1handler:
	push #4, R0
	push #4, R4
	push #4, R8
	push R12
	
	; reset int acknowledge bit
	
	pop R12
	pop #4, R8
	pop #4, R4
	pop #4, R0
	
	reti
	
; =============

;	R0 = character
fillscr:
	push #2, r1
	ldc mode0screen, r1
	ldc 768, r2
	loop r2: mov.b r0, *r1+
	pop #2, r1
	ret
	
clrscr:
	push r0
	clr r0
	call fillscr
	pop r0
	ret

	
; =============

idle:
	clr r0
	
$0:
	call fillscr
	
	seto r12
	loop r12: nop		; note: loop must ignore changes to PC!
	
	inc r0
	jmp $0-
	
	
; =============
	
	aorg >fffc
	
	dw int1handler

	aorg >fffe
	
	dw	reset
	
	